import numpy as np

# Input and output data
X = np.array(([2, 9], [1, 5], [3, 6]), dtype=float)
y = np.array(([92], [86], [89]), dtype=float)

# Normalize input and output data
X = X / np.amax(X, axis=0)  # Normalization of X by column-wise max
y = y / 100  # Normalize y to range [0, 1]

# Sigmoid function
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

# Derivative of the sigmoid function
def derivatives_sigmoid(x):
    return x * (1 - x)

# Variable initialization
epoch = 5  # Number of training iterations
lr = 0.1  # Learning rate

inputlayer_neurons = X.shape[1]  # Number of features in the dataset
hiddenlayer_neurons = 3  # Number of neurons in the hidden layer
output_neurons = 1  # Number of neurons in the output layer

# Weight and bias initialization
wh = np.random.uniform(size=(inputlayer_neurons, hiddenlayer_neurons))
bh = np.random.uniform(size=(1, hiddenlayer_neurons))
wout = np.random.uniform(size=(hiddenlayer_neurons, output_neurons))
bout = np.random.uniform(size=(1, output_neurons))

# Training loop
for i in range(epoch):
    # Forward Propagation
    hinp1 = np.dot(X, wh)
    hinp = hinp1 + bh
    hlayer_act = sigmoid(hinp)  # Hidden layer activation
    outinp1 = np.dot(hlayer_act, wout)
    outinp = outinp1 + bout
    output = sigmoid(outinp)  # Final output

    # Backpropagation
    EO = y - output  # Error at output
    outgrad = derivatives_sigmoid(output)  # Gradient of output layer
    d_output = EO * outgrad  # Delta for output layer

    EH = d_output.dot(wout.T)  # Error at hidden layer
    hiddengrad = derivatives_sigmoid(hlayer_act)  # Gradient of hidden layer
    d_hiddenlayer = EH * hiddengrad  # Delta for hidden layer

    # Update weights and biases
    wout += hlayer_act.T.dot(d_output) * lr
    bout += np.sum(d_output, axis=0, keepdims=True) * lr
    wh += X.T.dot(d_hiddenlayer) * lr
    bh += np.sum(d_hiddenlayer, axis=0, keepdims=True) * lr

    # Print progress
    print(f"----------- Epoch {i+1} Starts ----------")
    print("Input: \n" + str(X))
    print("Actual Output: \n" + str(y))
    print("Predicted Output: \n", output)
    print(f"----------- Epoch {i+1} Ends ----------\n")

# Final output
print("Input: \n" + str(X))
print("Actual Output: \n" + str(y))
print("Predicted Output: \n", output)
